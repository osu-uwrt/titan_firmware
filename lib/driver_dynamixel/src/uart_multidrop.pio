.program uart_multidrop
.side_set 1 opt

.define public irq_tx_compl_rel 0
.define public irq_frame_error_rel 1

; OUT pin 0 and side-set pin 0 are both mapped to UART TX pin.
; IN pin 0 and JMP pin are both mapped to the GPIO used as UART RX.

public rxdata:
    set pindirs, 0
.wrap_target
rxcontinue:
    wait 0 pin 0  [3]            ; Stall until start bit is asserted
    set x, 7   [7]               ; Preload bit counter, then delay until halfway through
rxloop:                          ; the first data bit (12 cycles incl wait, set).
    in pins, 1                   ; Shift data bit into ISR
    jmp x-- rxloop    [6]        ; Loop 8 times, each loop iteration is 8 cycles
    jmp pin good_stop            ; Check stop bit (should be high)

    irq irq_frame_error_rel rel  ; Either a framing error or a break. Set a sticky flag,
    wait 1 pin 0                 ; and wait for line to return to idle state.
    jmp rxcontinue               ; Don't push data if we didn't see good framing.

good_stop:                       ; No delay before returning to start; a little slack is
    push noblock                 ; important in case the TX clock is slightly too fast.
.wrap

; Entry point to begin data transmission
; x must be loaded with the number of bytes to transmit
; After transmission is complete, it will begin receiving data
public txdata:
    pull             side 1 [1]  ; Assert stop bit/stall with line in idle state waiting for data (1 extra to ensure stop bit sent)
    set pindirs, 1   side 0 [7]  ; Preload bit counter, assert start bit, and set to output if not set already
txloop:
    out pins, 1
    jmp !osre txloop        [6]  ; Loop for eacah bit to transmit
    jmp x-- txdata   side 1 [5]  ; Loop until all bytes have been sent, and assert stop bit for 6 cycles (8 after pull)
    irq irq_tx_compl_rel rel     ; Notify that transmit has been completed
    jmp rxdata       side 1      ; Transmit done, begin receiving data (also 8th tick of stop bit)

% c-sdk {
#include "hardware/clocks.h"

static inline void uart_multidrop_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud) {
    // Set pin to high by default, configured to input, mapped to PIO, and pulled high
    pio_sm_set_pins_with_mask(pio, sm, 1u << pin, 1u << pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);
    gpio_pull_up(pin);

    pio_sm_config c = uart_multidrop_program_get_default_config(offset);

    // Configure pins
    sm_config_set_in_pins(&c, pin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, pin); // for JMP
    sm_config_set_out_pins(&c, pin, 1);  // For out on transmit
    sm_config_set_set_pins(&c, pin, 1);  // For set pindirs
    sm_config_set_sideset_pins(&c, pin);  // For side set on transmit

    // Configure shift
    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&c, true, false, 8);
    // IN shifts to right, autopush disabled
    sm_config_set_in_shift(&c, true, false, 32);
    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    sm_config_set_clkdiv(&c, div);

    // Start state machine
    pio_sm_init(pio, sm, offset + uart_multidrop_offset_rxdata, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline char uart_rx_program_getc(PIO pio, uint sm) {
    // 8-bit read from the uppermost byte of the FIFO, as data is left-justified
    io_rw_8 *rxfifo_shift = (io_rw_8*)&pio->rxf[sm] + 3;
    while (pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    return (char)*rxfifo_shift;
}

static inline void uart_tx_program_putc(PIO pio, uint sm, char c) {
    pio_sm_put_blocking(pio, sm, (uint32_t)c);
}

%}
